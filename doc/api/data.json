{
    "project": {
        "name": "basil.js",
        "description": "basil.js description...",
        "version": "0.1",
        "url": "http://basiljs.ch",
        "logo": "http://basiljs.ch/basil2.jpg"
    },
    "files": {
        "basil.js": {
            "name": "basil.js",
            "modules": {},
            "classes": {
                "b": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "b": {
            "name": "b",
            "shortname": "b",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "basil.js",
            "line": 4,
            "static": 1
        }
    },
    "classitems": [
        {
            "file": "basil.js",
            "line": 35,
            "description": "System variable which stores the width of the current page.",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 41,
            "description": "System variable which stores the height of the current page.",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 110,
            "description": "Suspends the calling thread for a number of milliseconds.\nDuring a sleep period, checks at 100 millisecond intervals to see whether the sleep should be terminated.",
            "params": [
                {
                    "name": "milliseconds",
                    "description": "The delay time in milliseconds",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 122,
            "description": "Sets or possibly creates the current document and returns it. \nIf the param doc is not given the current document gets set to the active document \nin the application. If no document at all is open, a new document gets created.",
            "itemtype": "method",
            "name": "doc",
            "params": [
                {
                    "name": "doc",
                    "description": "The document to set the current document to",
                    "type": "Document",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current document instance",
                "type": "Document"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 138,
            "description": "Closes the current document.",
            "itemtype": "method",
            "name": "close",
            "params": [
                {
                    "name": "saveOptions",
                    "description": "The indesign SaveOptions constant",
                    "type": "SaveOptions",
                    "optional": true
                },
                {
                    "name": "file",
                    "description": "The indesign file instance to save the document to",
                    "type": "File",
                    "optional": true
                }
            ],
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 153,
            "description": "Returns the current page and sets it if argument page is given.",
            "itemtype": "method",
            "name": "page",
            "params": [
                {
                    "name": "page",
                    "description": "The page or page index to set the current page to",
                    "type": "Page|Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current page instance",
                "type": "Page"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 176,
            "description": "Returns the current layer and sets it if argument layer is given.",
            "itemtype": "method",
            "name": "layer",
            "params": [
                {
                    "name": "layer",
                    "description": "The layer or layer name to set the current layer to",
                    "type": "Layer|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current layer instance",
                "type": "Layer"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 196,
            "description": "Sets the units of the document (like right clicking the rulers).",
            "itemtype": "method",
            "name": "units",
            "params": [
                {
                    "name": "units",
                    "description": "Supported units: PT, PX, CM or MM",
                    "type": "Constant",
                    "optional": true
                }
            ],
            "return": {
                "description": "Current unit setting",
                "type": "Constant"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 409,
            "description": "Draws an ellipse (oval) in the display window. An ellipse with an equal <b>width</b> and <b>height</b> is a circle.\nThe first two parameters set the location, the third sets the width, and the fourth sets the height.",
            "itemtype": "method",
            "name": "ellipse",
            "params": [
                {
                    "name": "x",
                    "description": "Location X",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Location Y",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "Width",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "Height",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "New oval (n.b. in Adobe Scripting the corresponding type is Oval, not Ellipse)",
                "type": "Oval"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 468,
            "description": "Draws a line (a direct path between two points) to the page.",
            "itemtype": "method",
            "name": "line",
            "params": [
                {
                    "name": "x1",
                    "description": "Point A x-value",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y1",
                    "description": "Point A y-value",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "x2",
                    "description": "Point B x-value",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y2",
                    "description": "Point B y-value",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "New GraphicLine",
                "type": "GraphicLine"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 495,
            "description": "Draws a rectangle to the page.",
            "itemtype": "method",
            "name": "rect",
            "params": [
                {
                    "name": "x",
                    "description": "Position X",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Position Y",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "Width",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "Height",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "New rectangle",
                "type": "Rectangle"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 582,
            "description": "Sets the color used to fill shapes.",
            "itemtype": "method",
            "name": "fill",
            "params": [
                {
                    "name": "fillColor",
                    "description": "Accepts a Color/swatch or a string with the name of a color. Or values: C,M,Y,K / R,G,B / Grey",
                    "type": "Color|Swatch|Numbers"
                }
            ],
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 615,
            "description": "Sets the color used to draw lines and borders around shapes.",
            "itemtype": "method",
            "name": "stroke",
            "params": [
                {
                    "name": "strokeColor",
                    "description": "Accepts a Color/swatch or a string with the name of a color. Or values: C,M,Y,K / R,G,B / Grey",
                    "type": "Color|Swatch|Numbers"
                }
            ],
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 648,
            "description": "Sets the tint of the color used to fill shapes.",
            "itemtype": "method",
            "name": "fillTint",
            "params": [
                {
                    "name": "tint",
                    "description": "Number from 0 to 100",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 662,
            "description": "Sets the tint of the color used to draw lines and borders around shapes.",
            "itemtype": "method",
            "name": "strokeTint",
            "params": [
                {
                    "name": "tint",
                    "description": "Number from 0 to 100",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 676,
            "description": "Creates a new RGB or CMYK color and adds the new color to the document, or gets a color by name from the document",
            "itemtype": "method",
            "name": "color",
            "params": [
                {
                    "name": "Get",
                    "description": "color: the color name. Create new color: R,G,B,name or C,M,Y,K,name or Grey,name. Name is always optional",
                    "type": "String|Numbers"
                }
            ],
            "return": {
                "description": "found or new color",
                "type": "Color"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 752,
            "description": "Calculates a color or colors between two color at a specific increment. \nThe amt parameter is the amount to interpolate between the two values where 0.0 equal to the first point, 0.1 is very near the first point, 0.5 is half-way in between, etc.\nN.B.: Both color must be either CMYK or RGB.",
            "itemtype": "method",
            "name": "lerpColor",
            "params": [
                {
                    "name": "c1",
                    "description": "Input color 1",
                    "type": "Color"
                },
                {
                    "name": "c2",
                    "description": "Input color 2",
                    "type": "Color"
                },
                {
                    "name": "amt",
                    "description": "The Amount to interpolate between the two colors",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Interpolated color",
                "type": "Color"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 809,
            "description": "Creates a text frame on the current layer on the current page in the current document. \nThe text frame gets created in the position specified by the x and y parameters.\nThe default document font will be used unless a font is set with the textFont() function. \nThe default document font size will be used unless a font size is set with the textSize() function. \nChange the color of the text with the fill() function.\nThe text displays in relation to the textAlign() and textYAlign() functions. \nThe width and height parameters define a rectangular area.",
            "itemtype": "method",
            "name": "text",
            "params": [
                {
                    "name": "txt",
                    "description": "The text content to set in the text frame.",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "x-coordinate of text frame",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of text frame",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "width of text frame",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height of text frame",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The created text frame instance.",
                "type": "TextFrame"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 848,
            "description": "Sets text properties to the given item. If the item is not an instance the text property can be set to, \nthe property gets set to the direct descendants of the given item, e.g. all stories of a given document.\n\nIf no value is given and the given property is a string, the function acts as a getter and returns the \ncorresponding value(s) in an array. This can either be an array containing the value of the concrete item \n(e.g. character) the values of the item's descendants (e.g. paragraphs of given text frame).",
            "itemtype": "method",
            "name": "typo",
            "params": [
                {
                    "name": "item",
                    "description": "The object to apply the property to.",
                    "type": "Document|Spread|Page|Layer|Story|TextFrame|Text"
                },
                {
                    "name": "property",
                    "description": "The text property name of an object of key/value property/value pairs.\n                                  If property is a string and no value is given, the function acts as getter.",
                    "type": "String|Object"
                },
                {
                    "name": "value",
                    "description": "The value to apply to the property.",
                    "type": "String|Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The property value(s) if the function acts as getter or the items the property \n                             was assigned to.",
                "type": "String[]|Number[]"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 906,
            "description": "Returns the current font and sets it if argument fontName is given.",
            "itemtype": "method",
            "name": "textFont",
            "params": [
                {
                    "name": "fontName",
                    "description": "The name of the font to set. Font style can be separated with a tab, e.g. Helvetica\\tBold",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The name of the current font.",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 920,
            "description": "Returns the current font size in points and sets it if argument pointSize is given.",
            "itemtype": "method",
            "name": "textSize",
            "params": [
                {
                    "name": "pointSize",
                    "description": "The size in points to set.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current point size.",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 934,
            "description": "Sets the current horizontal and vertical text alignment.",
            "itemtype": "method",
            "name": "textAlign",
            "params": [
                {
                    "name": "align",
                    "description": "The horizontal text alignment to set. Must be one of the InDesign Justification enum values:\n                          Justification.AWAY_FROM_BINDING_SIDE\n                          Justification.CENTER_ALIGN\n                          Justification.CENTER_JUSTIFIED\n                          Justification.FULLY_JUSTIFIED\n                          Justification.LEFT_ALIGN\n                          Justification.LEFT_ALIGN\n                          Justification.RIGHT_ALIGN\n                          Justification.RIGHT_JUSTIFIED\n                          Justification.TO_BINDING_SIDE",
                    "type": "String"
                },
                {
                    "name": "yAlign",
                    "description": "The vertical text alignment to set. Must be one of the InDesign VerticalJustification enum values:\n                          VerticalJustification.BOTTOM_ALIGN\n                          VerticalJustification.CENTER_ALIGN\n                          VerticalJustification.JUSTIFY_ALIGN\n                          VerticalJustification.TOP_ALIGN",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 959,
            "description": "Returns the spacing between lines of text in units of points and sets it if argument leading is given.",
            "itemtype": "method",
            "name": "textLeading",
            "params": [
                {
                    "name": "leading",
                    "description": "The spacing between lines of text in units of points or the default Indesign enum \n                                  value Leading.AUTO.",
                    "type": "Number|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current leading.",
                "type": "Number|String"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 974,
            "description": "Returns the current kerning and sets it if argument kerning is given.",
            "itemtype": "method",
            "name": "textKerning",
            "params": [
                {
                    "name": "kerning",
                    "description": "The value to set.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current kerning.",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 988,
            "description": "Returns the current tracking and sets it if argument tracking is given.",
            "itemtype": "method",
            "name": "textTracking",
            "params": [
                {
                    "name": "tracking",
                    "description": "The value to set.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current tracking.",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 1016,
            "description": "Adds an image to the document. If the image argument is given as a string the image file  must be in the document's \ndata directory which is in the same directory where the document is saved in. The image argument can also be a File \ninstance which can be placed even before the document was saved.\nThe second argument can either be the x position of the frame to create or an instance of a rectangle, \noval or polygon to place the image in.\nIf x and y positions are given and width and height are not given, the frame's size gets set to the original image size.",
            "itemtype": "method",
            "name": "image",
            "params": [
                {
                    "name": "img",
                    "description": "The image file name in the document's data directory or a File instance",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "The x position on the current page or the item instance to place the image in",
                    "type": "Number|Rectangle|Oval|Polygon"
                },
                {
                    "name": "y",
                    "description": "The y position on the current page. Ignored if x is not a number.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "The width of the rectangle to add the image to. Ignored if x is not a number.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "h",
                    "description": "The height of the rectangle to add the image to. Ignored if x is not a number.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The item instance the image was placed in.",
                "type": "Rectangle|Oval|Polygon"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 1511,
            "description": "Returns items tagged with the given label in the InDesign Script Label pane (Window -> Utilities -> Script Label).",
            "itemtype": "method",
            "name": "findByLabel",
            "params": [
                {
                    "name": "label",
                    "description": "The label identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Array of concrete PageItem instances, e.g. TextFrame or SplineItem.",
                "type": "PageItem[]"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 1531,
            "description": "Returns the currently selected object(s).",
            "return": {
                "description": "Array of selected object(s).",
                "type": "Object[]"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 1769,
            "description": "Run the sketch! Has to be called in every sketch a the very end of the code.",
            "itemtype": "method",
            "name": "go",
            "class": "b"
        }
    ]
}