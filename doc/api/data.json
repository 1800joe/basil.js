{
    "project": {
        "name": "basil.js",
        "description": "basil.js description...",
        "version": "0.1",
        "url": "http://basiljs.ch",
        "logo": "http://basiljs.ch/basil2.jpg"
    },
    "files": {
        "basil.js": {
            "name": "basil.js",
            "modules": {},
            "classes": {
                "b": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "b": {
            "name": "b",
            "shortname": "b",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "basil.js",
            "line": 36,
            "static": 1
        }
    },
    "classitems": [
        {
            "file": "basil.js",
            "line": 68,
            "description": "System variable which stores the width of the current page.",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 74,
            "description": "System variable which stores the height of the current page.",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 133,
            "description": "Used to run a function on all elements of an array. Please note the existance of the convenience methods b.stories(), b.paragraphs(), b.lines(), b.words() and b.characters() that are used to iterate through all instances of the given type in the given document.",
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "collection",
                    "description": "The array to be processed.",
                    "type": "Array"
                },
                {
                    "name": "cb",
                    "description": "The function that will be called on each element. The call will be like function(item,i) where i is the current index of the item within the array.",
                    "type": "Function"
                }
            ],
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 155,
            "description": "Suspends the calling thread for a number of milliseconds.\nDuring a sleep period, checks at 100 millisecond intervals to see whether the sleep should be terminated.",
            "itemtype": "method",
            "name": "delay",
            "params": [
                {
                    "name": "milliseconds",
                    "description": "The delay time in milliseconds",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 166,
            "description": "Calls the given callback function with each story of the given document.",
            "itemtype": "method",
            "name": "stories",
            "params": [
                {
                    "name": "doc",
                    "description": "The document instance to iterate the stories in",
                    "type": "Document"
                },
                {
                    "name": "cb",
                    "description": "The callback function to call with each story. When this function returns false the loop stops. Passed arguments: story, loopCount;",
                    "type": "Function"
                }
            ],
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 177,
            "description": "Calls the given callback function with each paragraph of the given document, story or text frame.",
            "itemtype": "method",
            "name": "paragraphs",
            "params": [
                {
                    "name": "item",
                    "description": "The story or text frame instance to iterate the paragraphs in",
                    "type": "Document|Story|TextFrame"
                },
                {
                    "name": "cb",
                    "description": "The callback function to call with each paragraph. When this function returns false the loop stops. Passed arguments: para, loopCount",
                    "type": "Function"
                }
            ],
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 192,
            "description": "Calls the given callback function with each line of the given document, story, text frame or paragraph.",
            "itemtype": "method",
            "name": "lines",
            "params": [
                {
                    "name": "item",
                    "description": "The document, story, text frame or paragraph instance to\n                                                  iterate the lines in",
                    "type": "Document|Story|TextFrame|Paragraph"
                },
                {
                    "name": "cb",
                    "description": "The callback function to call with each line. When this function returns false the loop stops. Passed arguments: line, loopCount",
                    "type": "Function"
                }
            ],
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 208,
            "description": "Calls the given callback function with each word of the given document, story, text frame, paragraph or line.",
            "itemtype": "method",
            "name": "words",
            "params": [
                {
                    "name": "item",
                    "description": "The document, story, text frame, paragraph or line instance\n                                                       to iterate the words in",
                    "type": "Document|Story|TextFrame|Paragraph|Line"
                },
                {
                    "name": "cb",
                    "description": "The callback function to call with each word. When this function returns false the loop stops. Passed arguments: word, loopCount",
                    "type": "Function"
                }
            ],
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 224,
            "description": "Calls the given callback function with each character of the given document, story, text frame, paragraph, line or word.",
            "itemtype": "method",
            "name": "characters",
            "params": [
                {
                    "name": "item",
                    "description": "The document, story, text frame, paragraph, line or word instance to\n                                                   iterate the characters in",
                    "type": "Document|Story|TextFrame|Paragraph|Line|Word"
                },
                {
                    "name": "cb",
                    "description": "The callback function to call with each character. When this function returns false the loop stops. Passed arguments: character, loopCount",
                    "type": "Function"
                }
            ],
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 253,
            "description": "Checks whether a var is an Array, returns true if this is the case",
            "itemtype": "method",
            "name": "isArray",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to check",
                    "type": "Object|String|Number"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "Boolean"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 264,
            "description": "Checks whether a var is a number, returns true if this is the case",
            "itemtype": "method",
            "name": "isNumber",
            "params": [
                {
                    "name": "num",
                    "description": "The number to ckeck",
                    "type": "Object|String|Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 275,
            "description": "Checks whether a var is a indesign text object, returns true if this is the case",
            "itemtype": "method",
            "name": "isText",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to check",
                    "type": "Character|InsertionPoint|Line|Paragraph|TextColumn|TextStyleRange|Word"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "Boolean"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 296,
            "description": "Sets or possibly creates the current document and returns it.\nIf the param doc is not given the current document gets set to the active document\nin the application. If no document at all is open, a new document gets created.",
            "itemtype": "method",
            "name": "doc",
            "params": [
                {
                    "name": "doc",
                    "description": "The document to set the current document to",
                    "type": "Document",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current document instance",
                "type": "Document"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 312,
            "description": "Closes the current document.",
            "itemtype": "method",
            "name": "close",
            "params": [
                {
                    "name": "saveOptions",
                    "description": "The indesign SaveOptions constant",
                    "type": "SaveOptions",
                    "optional": true
                },
                {
                    "name": "file",
                    "description": "The indesign file instance to save the document to",
                    "type": "File",
                    "optional": true
                }
            ],
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 327,
            "description": "Returns the current page and sets it if argument page is given.",
            "itemtype": "method",
            "name": "page",
            "params": [
                {
                    "name": "page",
                    "description": "The page or page index to set the current page to",
                    "type": "Page|Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current page instance",
                "type": "Page"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 350,
            "description": "Returns the current layer and sets it if argument layer is given.",
            "itemtype": "method",
            "name": "layer",
            "params": [
                {
                    "name": "layer",
                    "description": "The layer or layer name to set the current layer to",
                    "type": "Layer|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current layer instance",
                "type": "Layer"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 370,
            "description": "Sets the units of the document (like right clicking the rulers).",
            "itemtype": "method",
            "name": "units",
            "params": [
                {
                    "name": "units",
                    "description": "Supported units: PT, PX, CM, MM or IN",
                    "type": "Constant",
                    "optional": true
                }
            ],
            "return": {
                "description": "Current unit setting",
                "type": "Constant"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 412,
            "description": "Creates a vertical guide line at the current spread and current layer.",
            "itemtype": "method",
            "name": "guideX",
            "params": [
                {
                    "name": "x",
                    "description": "Position of the new guide",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "New guide",
                "type": "Guide"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 430,
            "description": "Creates a horizontal guide line at the current spread and current layer.",
            "itemtype": "method",
            "name": "guideY",
            "params": [
                {
                    "name": "y",
                    "description": "Position of the new guide",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "New guide",
                "type": "Guide"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 482,
            "description": "Function convert an javascript object to a JSON-string. Usage:\nvar str = b.JSON.encode(obj);\nvar obj = b.JSON.decode(str);",
            "itemtype": "method",
            "name": "JSON.encode()",
            "params": [
                {
                    "name": "Object",
                    "description": "to be converted to a JSON-string",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns JSON-string",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 517,
            "description": "Converts a byte, char, int, or color to a String containing the\nequivalent binary notation. For example color(0, 102, 153, 255) \nwill convert to the String \"11111111000000000110011010011001\". This \nfunction can help make your geeky debugging sessions much happier.",
            "itemtype": "method",
            "name": "binary",
            "params": [
                {
                    "name": "num",
                    "description": "value to convert",
                    "type": "Number"
                },
                {
                    "name": "numBits",
                    "description": "number of digits to return",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "A formatted string",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 544,
            "description": "Converts a String representation of a binary number to its \nequivalent integer value. For example, unbinary(\"00001000\") will \nreturn 8.",
            "itemtype": "method",
            "name": "unbinary",
            "params": [
                {
                    "name": "binaryString",
                    "description": "value to convert",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The integer representation",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 577,
            "description": "Convert a number to a hex representation.",
            "itemtype": "method",
            "name": "hex",
            "params": [
                {
                    "name": "value",
                    "description": "The number to convert",
                    "type": "Number"
                },
                {
                    "name": "len",
                    "description": "The length of the hex number to be created, default: 8",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The hex representation as a string",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 596,
            "description": "Convert a hex representation to a number.",
            "itemtype": "method",
            "name": "unhex",
            "params": [
                {
                    "name": "hex",
                    "description": "The hex representation",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The number",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 615,
            "description": "Combines an array of Strings into one String, each separated by \nthe character(s) used for the separator parameter. To join arrays \nof ints or floats, it's necessary to first convert them to strings \nusing nf() or nfs().",
            "itemtype": "method",
            "name": "join",
            "params": [
                {
                    "name": "array",
                    "description": "A string array",
                    "type": "Array"
                },
                {
                    "name": "separator",
                    "description": "The separator to be inserted",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The joined string",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 631,
            "description": "The split() function breaks a string into pieces using a\ncharacter or string as the divider. The delim parameter specifies the\ncharacter or characters that mark the boundaries between each piece. A\nString[] array is returned that contains each of the pieces.\n\nIf the result is a set of numbers, you can convert the String[] array\nto to a float[] or int[] array using the datatype conversion functions\nint() and float() (see example above).\n\nThe splitTokens() function works in a similar fashion, except that it\nsplits using a range of characters instead of a specific character or\nsequence.",
            "itemtype": "method",
            "name": "split",
            "params": [
                {
                    "name": "str",
                    "description": "the String to be split",
                    "type": "String"
                },
                {
                    "name": "delim",
                    "description": "The string used to separate the data",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of strings",
                "type": "Array"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 655,
            "description": "The splitTokens() function splits a String at one or many character \n\"tokens.\" The tokens parameter specifies the character or characters \nto be used as a boundary.\n\nIf no tokens character is specified, any whitespace character is used \nto split. Whitespace characters include tab (\\t), line feed (\\n), \ncarriage return (\\r), form feed (\\f), and space. To convert a String \nto an array of integers or floats, use the datatype conversion functions \nint() and float() to convert the array of Strings.",
            "itemtype": "method",
            "name": "splitTokens",
            "params": [
                {
                    "name": "str",
                    "description": "the String to be split",
                    "type": "String"
                },
                {
                    "name": "tokens",
                    "description": "list of individual characters that will be used as separators",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of strings",
                "type": "Array"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 754,
            "description": "Utility function for formatting numbers into strings. There\nare two versions, one for formatting floats and one for formatting\nints. The values for the digits, left, and right parameters should\nalways be positive integers.\n\nAs shown in the above example, nf() is used to add zeros to the\nleft and/or right of a number. This is typically for aligning a list\nof numbers. To remove digits from a floating-point number, use the\nint(), ceil(), floor(), or round() functions.",
            "itemtype": "method",
            "name": "nf",
            "params": [
                {
                    "name": "value",
                    "description": "The Number to convert",
                    "type": "Number"
                },
                {
                    "name": "leftDigits",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "rightDigits",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The formatted string",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 776,
            "description": "Utility function for formatting numbers into strings. Similar to nf() \nbut leaves a blank space in front of positive numbers so they align \nwith negative numbers in spite of the minus symbol. There are two \nversions, one for formatting floats and one for formatting ints. The \nvalues for the digits, left, and right parameters should always be \npositive integers.",
            "itemtype": "method",
            "name": "nfs",
            "params": [
                {
                    "name": "value",
                    "description": "The Number to convert",
                    "type": "Number"
                },
                {
                    "name": "leftDigits",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "rightDigits",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The formatted string",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 795,
            "description": "Utility function for formatting numbers into strings. Similar to nf() \nbut puts a \"+\" in front of positive numbers and a \"-\" in front of \nnegative numbers. There are two versions, one for formatting floats \nand one for formatting ints. The values for the digits, left, and right \nparameters should always be positive integers.",
            "itemtype": "method",
            "name": "nfp",
            "params": [
                {
                    "name": "value",
                    "description": "The Number to convert",
                    "type": "Number"
                },
                {
                    "name": "leftDigits",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "rightDigits",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The formatted string",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 813,
            "description": "Utility function for formatting numbers into strings and placing \nappropriate commas to mark units of 1000. There are two versions, one \nfor formatting ints and one for formatting an array of ints. The value \nfor the digits parameter should always be a positive integer.",
            "itemtype": "method",
            "name": "nfc",
            "params": [
                {
                    "name": "value",
                    "description": "The Number to convert",
                    "type": "Number"
                },
                {
                    "name": "leftDigits",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "rightDigits",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The formatted string",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 831,
            "description": "Removes whitespace characters from the beginning and end of a String. \nIn addition to standard whitespace characters such as space, carriage \nreturn, and tab, this function also removes the Unicode \"nbsp\" character.",
            "itemtype": "method",
            "name": "trim",
            "params": [
                {
                    "name": "str",
                    "description": "A string or an array of strings to be trimmed",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "Returns the input in a trimmed way",
                "type": "String|Array"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 853,
            "description": "Draws an ellipse (oval) in the display window. An ellipse with an equal <b>width</b> and <b>height</b> is a circle.\nThe first two parameters set the location, the third sets the width, and the fourth sets the height.",
            "itemtype": "method",
            "name": "ellipse",
            "params": [
                {
                    "name": "x",
                    "description": "Location X",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Location Y",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "Width",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "Height",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "New oval (n.b. in Adobe Scripting the corresponding type is Oval, not Ellipse)",
                "type": "Oval"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 912,
            "description": "Draws a line (a direct path between two points) to the page.",
            "itemtype": "method",
            "name": "line",
            "params": [
                {
                    "name": "x1",
                    "description": "Point A x-value",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "Point A y-value",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "Point B x-value",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "Point B y-value",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "New GraphicLine",
                "type": "GraphicLine"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 940,
            "description": "Draws a rectangle to the page.",
            "itemtype": "method",
            "name": "rect",
            "params": [
                {
                    "name": "x",
                    "description": "Position X",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Position Y",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "Width",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "Height",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "New rectangle",
                "type": "Rectangle"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 992,
            "description": "The function calculates the geometric bounds of any given object.\nIn case the object is any kind of text, then additional typographic information baseline and xHeight are calculated",
            "itemtype": "method",
            "name": "bounds",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to calculate the geometric bounds",
                    "type": "Text|Object"
                }
            ],
            "return": {
                "description": "Geometric bounds object with these properties: width, height, left, right, top, bottom and for text: baseline, xHeight",
                "type": "Object"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 1094,
            "description": "Returns the object style with the given name. If the style does not exist it gets created.",
            "itemtype": "method",
            "name": "objectStyle",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the object style to return.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The object style instance.",
                "type": "ObjectStyle"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 1117,
            "description": "Sets the color used to fill shapes.",
            "itemtype": "method",
            "name": "fill",
            "params": [
                {
                    "name": "fillColor",
                    "description": "Accepts a Color/swatch or a string with the name of a color. Or values: C,M,Y,K / R,G,B / Grey",
                    "type": "Color|Swatch|Numbers"
                }
            ],
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 1151,
            "description": "Sets the color used to draw lines and borders around shapes.",
            "itemtype": "method",
            "name": "stroke",
            "params": [
                {
                    "name": "strokeColor",
                    "description": "Accepts a Color/swatch or a string with the name of a color. Or values: C,M,Y,K / R,G,B / Grey",
                    "type": "Color|Swatch|Numbers"
                }
            ],
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 1185,
            "description": "Sets the tint of the color used to fill shapes.",
            "itemtype": "method",
            "name": "fillTint",
            "params": [
                {
                    "name": "tint",
                    "description": "Number from 0 to 100",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 1199,
            "description": "Sets the tint of the color used to draw lines and borders around shapes.",
            "itemtype": "method",
            "name": "strokeTint",
            "params": [
                {
                    "name": "tint",
                    "description": "Number from 0 to 100",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 1213,
            "description": "Creates a new RGB or CMYK color and adds the new color to the document, or gets a color by name from the document",
            "itemtype": "method",
            "name": "color",
            "params": [
                {
                    "name": "Get",
                    "description": "color: the color name. Create new color: R,G,B,name or C,M,Y,K,name or Grey,name. Name is always optional",
                    "type": "String|Numbers"
                }
            ],
            "return": {
                "description": "found or new color",
                "type": "Color"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 1299,
            "description": "Calculates a color or colors between two color at a specific increment. \nThe amt parameter is the amount to interpolate between the two values where 0.0 equal to the first point, 0.1 is very near the first point, 0.5 is half-way in between, etc.\nN.B.: Both color must be either CMYK or RGB.",
            "itemtype": "method",
            "name": "lerpColor",
            "params": [
                {
                    "name": "c1",
                    "description": "Input color 1",
                    "type": "Color"
                },
                {
                    "name": "c2",
                    "description": "Input color 2",
                    "type": "Color"
                },
                {
                    "name": "amt",
                    "description": "The Amount to interpolate between the two colors",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Interpolated color",
                "type": "Color"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 1356,
            "description": "Creates a text frame on the current layer on the current page in the current document. \nThe text frame gets created in the position specified by the x and y parameters.\nThe default document font will be used unless a font is set with the textFont() function. \nThe default document font size will be used unless a font size is set with the textSize() function. \nChange the color of the text with the fill() function.\nThe text displays in relation to the textAlign() and textYAlign() functions. \nThe width and height parameters define a rectangular area.",
            "itemtype": "method",
            "name": "text",
            "params": [
                {
                    "name": "txt",
                    "description": "The text content to set in the text frame.",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "x-coordinate of text frame",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of text frame",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "width of text frame",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height of text frame",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The created text frame instance",
                "type": "TextFrame"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 1405,
            "description": "Sets text properties to the given item. If the item is not an instance the text property can be set to,\nthe property gets set to the direct descendants of the given item, e.g. all stories of a given document.\n\nIf no value is given and the given property is a string, the function acts as a getter and returns the\ncorresponding value(s) in an array. This can either be an array containing the value of the concrete item\n(e.g. character) the values of the item's descendants (e.g. paragraphs of given text frame).",
            "itemtype": "method",
            "name": "typo",
            "params": [
                {
                    "name": "item",
                    "description": "The object to apply the property to.",
                    "type": "Document|Spread|Page|Layer|Story|TextFrame|Text"
                },
                {
                    "name": "property",
                    "description": "The text property name of an object of key/value property/value pairs.\n                                  If property is a string and no value is given, the function acts as getter.",
                    "type": "String|Object"
                },
                {
                    "name": "value",
                    "description": "The value to apply to the property.",
                    "type": "String|Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The property value(s) if the function acts as getter or the items the property\n                             was assigned to.",
                "type": "String[]|Number[]"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 1464,
            "description": "Returns the current font and sets it if argument fontName is given.",
            "itemtype": "method",
            "name": "textFont",
            "params": [
                {
                    "name": "fontName",
                    "description": "The name of the font to set e.g. Helvetica",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "fontStyle",
                    "description": "The Font style e.g. Bold",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The name of the current font",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 1482,
            "description": "Returns the current font size in points and sets it if argument pointSize is given.",
            "itemtype": "method",
            "name": "textSize",
            "params": [
                {
                    "name": "pointSize",
                    "description": "The size in points to set.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current point size.",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 1496,
            "description": "Sets the current horizontal and vertical text alignment.",
            "itemtype": "method",
            "name": "textAlign",
            "params": [
                {
                    "name": "align",
                    "description": "The horizontal text alignment to set. Must be one of the InDesign Justification enum values:\n                          Justification.AWAY_FROM_BINDING_SIDE\n                          Justification.CENTER_ALIGN\n                          Justification.CENTER_JUSTIFIED\n                          Justification.FULLY_JUSTIFIED\n                          Justification.LEFT_ALIGN\n                          Justification.RIGHT_ALIGN\n                          Justification.RIGHT_JUSTIFIED\n                          Justification.TO_BINDING_SIDE",
                    "type": "String"
                },
                {
                    "name": "yAlign",
                    "description": "The vertical text alignment to set. Must be one of the InDesign VerticalJustification enum values:\n                          VerticalJustification.BOTTOM_ALIGN\n                          VerticalJustification.CENTER_ALIGN\n                          VerticalJustification.JUSTIFY_ALIGN\n                          VerticalJustification.TOP_ALIGN",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 1520,
            "description": "Returns the spacing between lines of text in units of points and sets it if argument leading is given.",
            "itemtype": "method",
            "name": "textLeading",
            "params": [
                {
                    "name": "leading",
                    "description": "The spacing between lines of text in units of points or the default Indesign enum\n                                  value Leading.AUTO.",
                    "type": "Number|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current leading.",
                "type": "Number|String"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 1535,
            "description": "Returns the current kerning and sets it if argument kerning is given.",
            "itemtype": "method",
            "name": "textKerning",
            "params": [
                {
                    "name": "kerning",
                    "description": "The value to set.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current kerning.",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 1549,
            "description": "Returns the current tracking and sets it if argument tracking is given.",
            "itemtype": "method",
            "name": "textTracking",
            "params": [
                {
                    "name": "tracking",
                    "description": "The value to set.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current tracking.",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 1563,
            "description": "Returns the character style with the given name. If the style does not exist it gets created.",
            "itemtype": "method",
            "name": "characterStyle",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the character style to return.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The character style instance.",
                "type": "CharachterStyle"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 1581,
            "description": "Returns the paragraph style with the given name. If the style does not exist it gets created.",
            "itemtype": "method",
            "name": "paragraphStyle",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the paragraph style to return.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The paragraph style instance.",
                "type": "ParagraphStyle"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 1599,
            "description": "Links the stories of two textframes to one story. Text of first textframe overflows to second one.",
            "itemtype": "method",
            "name": "linkTextFrames",
            "params": [
                {
                    "name": "textFrameA",
                    "description": "",
                    "type": "TextFrame"
                },
                {
                    "name": "textFrameB",
                    "description": "",
                    "type": "TextFrame"
                }
            ],
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 1618,
            "description": "Adds an image to the document. If the image argument is given as a string the image file  must be in the document's\ndata directory which is in the same directory where the document is saved in. The image argument can also be a File\ninstance which can be placed even before the document was saved.\nThe second argument can either be the x position of the frame to create or an instance of a rectangle,\noval or polygon to place the image in.\nIf x and y positions are given and width and height are not given, the frame's size gets set to the original image size.",
            "itemtype": "method",
            "name": "image",
            "params": [
                {
                    "name": "img",
                    "description": "The image file name in the document's data directory or a File instance",
                    "type": "String|File"
                },
                {
                    "name": "x",
                    "description": "The x position on the current page or the item instance to place the image in",
                    "type": "Number|Rectangle|Oval|Polygon"
                },
                {
                    "name": "y",
                    "description": "The y position on the current page. Ignored if x is not a number.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "The width of the rectangle to add the image to. Ignored if x is not a number.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "h",
                    "description": "The height of the rectangle to add the image to. Ignored if x is not a number.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The item instance the image was placed in.",
                "type": "Rectangle|Oval|Polygon"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 1688,
            "description": "Transforms position and size of an image.\nThe image fit options are always \"contentToFrame\".",
            "itemtype": "method",
            "name": "transformImage",
            "params": [
                {
                    "name": "img",
                    "description": "The image to transform",
                    "type": "Graphic"
                },
                {
                    "name": "x",
                    "description": "New x",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "New y",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "New width",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "New height",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 2191,
            "description": "Returns items tagged with the given label in the InDesign Script Label pane (Window -> Utilities -> Script Label).",
            "itemtype": "method",
            "name": "findByLabel",
            "params": [
                {
                    "name": "label",
                    "description": "The label identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Array of concrete PageItem instances, e.g. TextFrame or SplineItem.",
                "type": "PageItem[]"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 2211,
            "description": "Returns the currently selected object(s)",
            "itemtype": "method",
            "name": "selection",
            "return": {
                "description": "Array of selected object(s).",
                "type": "Object[]"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 2221,
            "description": "Reads the contents of a file and creates a String array of its individual lines.\nIf the file is specified by name as String, it must be located in the document's data directory.",
            "itemtype": "method",
            "name": "loadStrings",
            "params": [
                {
                    "name": "file",
                    "description": "The text file name in the document's data directory or a File instance",
                    "type": "String|File"
                }
            ],
            "return": {
                "description": "Array of the individual lines in the given file.",
                "type": "String[]"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 2256,
            "description": "Writes an array of strings to a file, one line per string. This file is saved to the document's data directory.\nIf the given file exists it gets overridden.",
            "itemtype": "method",
            "name": "saveStrings",
            "params": [
                {
                    "name": "file",
                    "description": "The file name or a File instance",
                    "type": "String|File"
                },
                {
                    "name": "strings",
                    "description": "The string array to be written",
                    "type": "String[]"
                }
            ],
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 2273,
            "description": "Exports the current document as PDF to the documents data folder. Please note, that export options default to the last used export settings.",
            "todo": [
                "data folder is not created automatically",
                ""
            ],
            "itemtype": "method",
            "name": "savePDF",
            "params": [
                {
                    "name": "file",
                    "description": "The file name or a File instance",
                    "type": "String|File"
                },
                {
                    "name": "showOptions",
                    "description": "Whether to show the export dialog",
                    "type": "Boolean"
                }
            ],
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 2292,
            "description": "Positions a PageItem at the designated spot on the x axis. If no x argument is given the current x position is returned.",
            "itemtype": "method",
            "name": "itemX",
            "params": [
                {
                    "name": "pItem",
                    "description": "The PageItem to alter",
                    "type": "PageItem"
                },
                {
                    "name": "x",
                    "description": "The new x position",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current x position",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 2312,
            "description": "Positions a PageItem at the designated spot on the y axis. If no y argument is given the current y position is returned.",
            "itemtype": "method",
            "name": "itemY",
            "params": [
                {
                    "name": "pItem",
                    "description": "The PageItem to alter",
                    "type": "PageItem"
                },
                {
                    "name": "y",
                    "description": "The new y position",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current y position",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 2332,
            "description": "Scales the given PageItem to the given width. If width is not given as argument the current width is returned.",
            "itemtype": "method",
            "name": "itemWidth",
            "params": [
                {
                    "name": "pItem",
                    "description": "The PageItem to alter",
                    "type": "PageItem"
                },
                {
                    "name": "width",
                    "description": "The new width",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current width",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 2352,
            "description": "Scales the given PageItem to the given height. If height is not given as argument the current height is returned.",
            "itemtype": "method",
            "name": "itemHeight",
            "params": [
                {
                    "name": "pItem",
                    "description": "The PageItem to alter",
                    "type": "PageItem"
                },
                {
                    "name": "height",
                    "description": "The new height",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current height",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 2372,
            "description": "Moves the given PageItem to the given position. If x or y is not given as argument the current position is returned.",
            "itemtype": "method",
            "name": "itemPosition",
            "params": [
                {
                    "name": "pItem",
                    "description": "The PageItem to alter",
                    "type": "PageItem"
                },
                {
                    "name": "x",
                    "description": "The new x coordinate",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "The new y coordinate",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns an object with the fields x and y",
                "type": "Object"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 2397,
            "description": "Scales the given PageItem to the given size. If width or height is not given as argument the current size is returned.",
            "itemtype": "method",
            "name": "itemSize",
            "params": [
                {
                    "name": "pItem",
                    "description": "The PageItem to alter",
                    "type": "PageItem"
                },
                {
                    "name": "width",
                    "description": "The new width",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "height",
                    "description": "The new height",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns an object with the fields width and height",
                "type": "Object"
            },
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 2633,
            "description": "Run the sketch! Has to be called in every sketch a the very end of the code.",
            "itemtype": "method",
            "name": "go",
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 2644,
            "description": "EXPERIMENTAL!\n\nCauses basil to continuously execute the code within draw() when InDesign is idle.\n#targetengine \"loop\"; must be at the very top in the script file.\nIf noLoop() is called, the code in draw() stops executing.\nIt is essential to call noLoop() or execute the script lib/stop.jsx when the script is finished!\nThe framerate property determines how often draw() is called per second, e.g. a framerate of 20 will 20times call draw() per second.",
            "itemtype": "method",
            "name": "loop",
            "params": [
                {
                    "name": "framerate",
                    "description": "The framerate per second, determines how often draw() is called per second.",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "basil.js",
            "line": 2676,
            "description": "EXPERIMENTAL!\n\nStops basil from continuously executing the code within draw().",
            "itemtype": "method",
            "name": "noLoop",
            "class": "b"
        }
    ]
}