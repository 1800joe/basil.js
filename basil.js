(function(glob, app) {  var pub = {},    doc = null,    page = null,    layer = null;  // ----------------------------------------  // global functions  if (!glob.forEach) {    glob.forEach = function(collection, cb) {      for (var i = 0, len = collection.length; i < len; i++) {        cb(collection[i]);      }    };  }    // ----------------------------------------  // Environment    pub.doc = function(d) {    return currentDoc();  };  pub.page = function(p) {    if (p === 'undefined' || p === null) return page;    if (typeof p === 'object') {      page = p;    } else {      page = getPageByNumber(p);    }    return page;  };  pub.layer = function(l) {    if (!l) return layer;    if (typeof l === 'object') {      layer = l;    } else {      layer = currentDoc().layers.item(l);      if (!layer.isValid) {        layer = currentDoc().layers.add({name: l});      }    }    return layer;  };  // ----------------------------------------  // Typography  pub.text = function(txt, x, y, w, h) {    var textFrame = addTextFrame();    textFrame.geometricBounds = [y, x, y + h, x + w];    textFrame.contents = txt;    return textFrame;  };    // ----------------------------------------  // Math    pub.random = function() {    var currentRandom = Math.random;    if (arguments.length === 0) {      return currentRandom();    } else if (arguments.length === 1) {      return currentRandom() * arguments[0];    } else {      var aMin = arguments[0], aMax = arguments[1];      return currentRandom() * (aMax - aMin) + aMin;    }  };      pub.map = function(value, istart, istop, ostart, ostop) {    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));  };      pub.constrain = function(aNumber, aMin, aMax) {    return aNumber > aMax ? aMax : aNumber < aMin ? aMin : aNumber;  };  // ----------------------------------------  // Input    pub.findByLabel = function(l) {    // FIXME always return array with either one or all pageItems with the given label    return currentDoc().pageItems.item(l);  };  // ----------------------------------------  // Output    pub.println = function(msg) {    $.writeln(msg);  };  pub.print = function(msg) {    $.write(msg);  };    // ----------------------------------------  // all private from here  var init = function() {    glob.b = pub;    // TODO store document units    try {      runUserScript();      } finally {      // TODO reset document units      }  };  var runUserScript = function() {    app.doScript(function() {      if (typeof glob.setup === 'function') {        glob.setup();      }      if (typeof glob.draw === 'function') {        glob.draw();      }          }, ScriptLanguage.javascript, undefined, UndoModes.entireScript);  };    var currentDoc = function() {    if (!doc) {      try {        doc = app.activeDocument;        } catch(e) {        doc = app.documents.add();      }    }    return doc;  };    var currentPage = function() {    if (!page) {      currentDoc();      page = app.activeWindow.activePage;    }    return page;  };    var getPageByNumber = function(num) {    return currentDoc().pages.item(num);  };    var addTextFrame = function() {    var textFrames = currentPage().textFrames;    return layer ? textFrames.add(layer) : textFrames.add();  };    init();  })(this, app);